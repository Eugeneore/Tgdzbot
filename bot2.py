import telebot
from telebot import types
from settings import *

bot = telebot.TeleBot(token)

menu = False
key_accepted = False
waiting_ob = False
changing_lesson = False
waiting_sr = False
choosen_lesson = None

@bot.message_handler(commands=['start'])
def start(message):
    global choosen_lesson
    choosen_lesson = None

    base = open_file('base')
    if str(message.chat.id) in base:
        bot.send_message(message.chat.id, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        global menu
        menu = True
        choose(message)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –∫–ª—é—á")


@bot.message_handler(content_types=['text'])
def choose(message):
    global menu
    global key_accepted
    global waiting_ob
    global waiting_sr
    global changing_lesson
    global choosen_lesson

    base = open_file('base')
    lang_base = open_file('lang_base')
    can_cange_all = open_file('can_change')

    if str(message.chat.id) not in base and not key_accepted:
        if message.text == security_key:
            bot.send_message(message.chat.id, "–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç‚úÖ\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–º—è")
            menu = True
            key_accepted = True
        else:
            bot.send_message(message.chat.id, "–ö–ª—é—á –Ω–µ –≤–µ—Ä–Ω—ã–π‚õî")

    elif str(message.chat.id) not in base and key_accepted:
        add_to_file(f"{message.chat.id}\n{message.text}\n", 'base.txt')
        bot.send_message(message.chat.id, "–î–∞–ª—å—à–µ")
        choose(message)

    elif str(message.chat.id) not in lang_base and message.text not in groups_s:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≥—Ä—É–ø–ø–∞ 1 (–•—Ä–∞–º–æ–≤–∞)")
        button2 = types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≥—Ä—É–ø–ø–∞ 2 (–õ—é–±–æ–≤—å –ë–æ—Ä–∏—Å–æ–≤–Ω–∞)")
        button3 = types.KeyboardButton("–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫")
        markup.row(button1, button2)
        markup.add(button3)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã:", reply_markup=markup)

    elif str(message.chat.id) not in lang_base and message.text in groups_s:
        add_to_file(f'{message.chat.id}\n{groups[groups_s.index(message.text)]}\n', "lang_base.txt")
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üôÇ")
        menu = True
        choose(message)

    elif str(message.chat.id) not in lang_base:
        bot.send_message(message.chat.id, "–¢—ã —á—ë-—Ç–æ –Ω–µ —Ç–æ –ø–æ—Å–ª–∞–ª")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≥—Ä—É–ø–ø–∞ 1 (–•—Ä–∞–º–æ–≤–∞)")
        button2 = types.KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≥—Ä—É–ø–ø–∞ 2 (–õ—é–±–æ–≤—å –ë–æ—Ä–∏—Å–æ–≤–Ω–∞)")
        button3 = types.KeyboardButton("–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫")
        markup.row(button1, button2)
        markup.add(button3)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã:", reply_markup=markup)

    elif waiting_sr:
        try:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–í –º–µ–Ω—é")
            markup.add(button1)

            l = [int(i) for i in message.text.split()]
            bot.send_message(message.chat.id, f"{sum(l) / len(l)}", reply_markup=markup)
        except:
            bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫")
            menu = True
            waiting_sr = False
            choose(message)

    elif menu:
        menu = False
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button = types.KeyboardButton("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ")
        button2 = types.KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏üîê")
        button3 = types.KeyboardButton("–û–±—ä—è–≤–ª–µ–Ω–∏–µ üì¢")
        button4 = types.KeyboardButton("–†–∞–∑–Ω–æ–µ")
        markup.add(button)
        markup.add(button2)
        markup.add(button3)
        markup.row(button4)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:", reply_markup=markup)

    elif message.text == "–†–∞–∑–Ω–æ–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        ex = types.KeyboardButton("–í –º–µ–Ω—é")
        button = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìã")
        button1 = types.KeyboardButton("–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ")
        button2 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ—Ç–≤–µ—Ä—Ç–∏")
        markup.add(ex)
        markup.row(button, button2)
        markup.add(button1)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:",reply_markup=markup)

    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ—Ç–≤–µ—Ä—Ç–∏":
        che = open("chet_info.txt", "r+", encoding=("utf-8"))
        chet = che.readlines()
        chet = [i[:len(i) - 1] for i in chet]
        che.close()

        bot.send_message(message.chat.id, f"–ß–µ—Ç–≤–µ—Ä—Ç—å:{chet[0]}\n–ù–∞—á–∞–ª–æ:{chet[4]}, {chet[5]}\n–ö–æ–Ω–µ—Ü —á–µ—Ä–µ–∑ +-{chet[1]} –¥–Ω—è(—Ä–∞–±–æ—á–∏—Ö), +-{chet[2]} –≤ {chet[3]}")

    elif message.text == "–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        markup.add(button1)

        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", reply_markup=markup)
        waiting_sr = True

    elif message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìã":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–í –º–µ–Ω—é")
        button2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üîê(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        markup.add(button1)
        markup.add(button2)
        bot.send_message(message.chat.id, f"{rasp}", reply_markup=markup)

    elif message.text == "–í –º–µ–Ω—é" or message.text == "–û—Ç–º–µ–Ω–∞":
        menu = True
        waiting_ob = False
        waiting_sr = False
        choosen_lesson = None
        choose(message)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üîê(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)":
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        menu = True
        choose(message)

    elif message.text == "–û–±—ä—è–≤–ª–µ–Ω–∏–µ üì¢":
        if str(message.chat.id) in can_cange_all:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", reply_markup=markup)
            waiting_ob = True
        else:
            bot.send_message(message.chat.id, "–≠—ç—ç –∫—É–¥–∞ –ª–µ–∑–µ–º")
            menu = True
            choose(message)

    elif waiting_ob:
        ob(base, message.text, bot)
        bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–æ, —Ö–∑ –Ω–µ —à–∞—Ä—é –∑–∞ —Ä—É—Å—Å–∫–∏–π")
        waiting_ob = False
        menu = True
        choose(message)

    elif message.text == "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ" or message.text == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏üîê":
        if message.text == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏üîê" and str(message.chat.id) in can_cange_all:
            changing_lesson = True

        msg = "–î–∑:\n"
        for i in range(0, len(lessons_technik)):
            if send_info_about_lesson(lessons_technik[i]) != "–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ":
                msg += lessons_technik_s[i] + ": –µ—Å—Ç—å\n"
            else:
                msg += lessons_technik_s[i] + ": –Ω–µ—Ç\n"
        bot.send_message(message.chat.id, msg)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button2 = types.KeyboardButton("–ê–ª–≥–µ–±—Ä–∞ üü∞")
        button3 = types.KeyboardButton("–§–∏–∑–∏–∫–∞ üßë‚Äçüî¨")
        button4 = types.KeyboardButton("–õ–∏—Ç-—Ä–∞ üìñ")
        button5 = types.KeyboardButton("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å üé≤")
        button6 = types.KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ üñãÔ∏è")
        button7 = types.KeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è üåç")
        button8 = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è ‚è≥")
        button9 = types.KeyboardButton("–ì–µ–æ–º–µ—Ç—Ä–∏—è üìê")
        button10 = types.KeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è ü¶†")
        button11 = types.KeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ")
        button12 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª")
        button13 = types.KeyboardButton("–ú—É–∑—ã–∫–∞ üé∂")
        button_exit = types.KeyboardButton("–í –º–µ–Ω—é")

        lang1 = types.KeyboardButton("–ê–Ω–≥–ª.—è–∑")
        lang2 = types.KeyboardButton("–ù–µ–º.—è–∑")

        markup.add(button_exit)
        markup.row(lang1, lang2)
        markup.row(button2, button3, button4)
        markup.row(button5, button6, button7)
        markup.row(button8, button9, button10)
        markup.row(button11, button12, button13)

        bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –≤–∞–º –Ω—É–∂–µ–Ω —É—Ä–æ–∫?", reply_markup=markup)

    elif message.text in lessons_s:
        if not changing_lesson:
            if message.text not in ["–ê–Ω–≥–ª.—è–∑", "–ù–µ–º.—è–∑"]:
                choosen_lesson = lessons[lessons_s.index(message.text)]
            else:
                lang = open_file("lang_base")
                choosen_lesson = ["eng_", "nem_"][["–ê–Ω–≥–ª.—è–∑", "–ù–µ–º.—è–∑"].index(message.text)] + lang[lang.index(f"{message.chat.id}") + 1]

            if send_info_about_lesson(choosen_lesson) != "–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ":
                bot.send_message(message.chat.id, f"–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–¥–∞–Ω–æ:\n{send_info_about_lesson(choosen_lesson)}")
                if choosen_lesson in photos:
                    f = open("photos/photos.txt", "r+")
                    b = f.readlines()
                    l = [i[:len(i) - 1] for i in b]
                    f.close()
                    if choosen_lesson in l:
                        photo = open(f"photos/{choosen_lesson}.png", "rb")
                        bot.send_photo(message.chat.id, photo)
            else:
                bot.send_message(message.chat.id, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –õ–∏–±–æ —É—Ä–æ–∫ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–¥–∞–Ω–æ")

        else:
            if message.text not in ["–ê–Ω–≥–ª.—è–∑", "–ù–µ–º.—è–∑"]:
                choosen_lesson = lessons[lessons_s.index(message.text)]
            else:
                lang = open_file("lang_base")
                choosen_lesson = ["eng_", "nem_"][["–ê–Ω–≥–ª.—è–∑", "–ù–µ–º.—è–∑"].index(message.text)] + lang[lang.index(f"{message.chat.id}") + 1]

            changing_lesson = False

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button = types.KeyboardButton("–î–∞")
            button1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
            button2 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –¥–∑")
            ph = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
            del_ph = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ")
            markup.row(button, button1)
            markup.add(button2)
            markup.add(ph, del_ph)

            if message.text not in ["–ê–Ω–≥–ª.—è–∑", "–ù–µ–º.—è–∑"]:
                choosen_lesson = lessons[lessons_s.index(message.text)]
            else:
                lang = open_file("lang_base")
                choosen_lesson = ["eng_", "nem_"][["–ê–Ω–≥–ª.—è–∑", "–ù–µ–º.—è–∑"].index(message.text)] + lang[lang.index(f"{message.chat.id}") + 1]

            if send_info_about_lesson(choosen_lesson) != "–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ":
                bot.send_message(message.chat.id, f"–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–¥–∞–Ω–æ:\n{send_info_about_lesson(choosen_lesson)}—Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)
                if choosen_lesson in photos:
                    f = open("photos/photos.txt", "r+")
                    b = f.readlines()
                    l = [i[:len(i) - 1] for i in b]
                    f.close()
                    if choosen_lesson in l:
                        photo = open(f"photos/{choosen_lesson}.png", "rb")
                        bot.send_photo(message.chat.id, photo)
            else:
                bot.send_message(message.chat.id, "–£—Ä–æ–∫ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω", reply_markup=markup)

    elif message.text == "–î–∞" and str(message.chat.id) in can_cange_all and choosen_lesson != None:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –¥–∑")

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –¥–∑" and str(message.chat.id) in can_cange_all and choosen_lesson != None:
        replace_in_file("-", f"{choosen_lesson}", "Domashka")
        bot.send_message(message.chat.id, "–î–∑ —É–¥–∞–ª–µ–Ω–æ!")
        print(choosen_lesson, message.chat.id)


    elif str(message.chat.id) in can_cange_all and message.text == "–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ" and choosen_lesson != None:
        if choosen_lesson in photos:
            f = open('photos/photos.txt', 'r+')
            l = f.readlines()
            f.close()
            f = open("photos/photos.txt", "w")
            for i in range(0, len(l)):
                if l[i][:len(l[i]) - 1] != choosen_lesson:
                    f.write(l[i])
                else:
                    continue
            bot.send_message(message.chat.id, "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!")

        else:
            bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ" and str(message.chat.id) in can_cange_all:
        if choosen_lesson in photos:
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫!")

    elif str(message.chat.id) in can_cange_all and choosen_lesson != None:
        replace_in_file(message.text, choosen_lesson, "Domashka")
        bot.send_message(message.chat.id, "–î–∑ –∑–∞–º–µ–Ω–µ–Ω–æ!")
        print(choosen_lesson, message.chat.id)

    else:
        bot.send_message(message.chat.id, "–í–æ–∑–º–æ–∂–Ω–æ –º–µ–Ω—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª–∏ –∏–ª–∏ –µ—â—ë —á—ë. –ö–æ—Ä–æ—á–µ —è –Ω–µ –ø–æ–Ω—è–ª —á—ë –æ—Ç –º–µ–Ω—è —Ö–æ—Ç—è—Ç –¥–∞–≤–∞–π –≤—Å—ë –∑–∞–Ω–æ–≤–æ –µ—Å–ª–∏ —á—ë –ø–∏—à–∏ @Zhenka103201")


@bot.message_handler(content_types=['photo'])
def photo(message):
    global choosen_lesson
    global menu
    global waiting_ob

    can_cange_all = open_file('can_change')

    if not waiting_ob:
        if choosen_lesson in photos and str(message.chat.id) in can_cange_all:
            file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            src = '/Users/EI/PycharmProjects/tgdzbot/photos/' + f"{choosen_lesson}.png"
            with open(src, 'wb') as new_file:
                new_file.write(downloaded_file)
            f = open("photos/photos.txt", "r+")
            l = f.readlines()
            f.close()
            f = open("photos/photos.txt", "w+")
            f.write(choosen_lesson + "\n")
            for i in range(0, len(l)):
                if l[i][:len(l[i]) - 1] != choosen_lesson:
                    f.write(l[i])
                else:
                    continue
            bot.send_message(message.chat.id, "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            print(choosen_lesson, message.chat.id)

        else:
            bot.send_message(message.chat.id, "–ø–∂ –Ω–µ –Ω–∞–¥–∞ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å")
    else:
        file_info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        src = '/Users/EI/PycharmProjects/tgdzbot/' + f"ob.png"
        with open(src, 'wb') as new_file:
            new_file.write(downloaded_file)
        base = open_file('base')
        ob_photo(base, bot)
        bot.send_message(message.chat.id, "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


bot.infinity_polling()
